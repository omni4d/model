# In most circumstances, classes should consist of signs of the same type.
org.omni4d.core.class_of_individuals:
  type: class

org.omni4d.core.class_of_events:
  type: class

org.omni4d.core.class_of_tuples:
  type: class

org.omni4d.core.class_of_classes:part
  type: class


# Two classes of tuples are particularly important in the omni4d view of the
# world: class_member and part_subpart.

org.omni4d.core.class_member_tuples:
  type: class

org.omni4d.core.part_subpart_tuples:
  type: class

# A problem of recursion arises: How do we make a tuple a member of the
# class_member_tuples class? If we use a class_member tuple to do so,  how do we
# make that tuple a member of the class_members class?

# A similar issue arises when we attempt to show that the part_subpart_tuples
# class has a part_subpart relationship with class_of_tuples.

# One solution would be to create subtypes of tuple and insist that all tuple
# signs must of one of those subtypes rather than the base type; effectively
# embedding the meaning we desire within the type system.

# Instead, we make two assertions and embed the meaning we desire within
# those assertions:

# 1) Any tuple with contained objects of another tuple and the
# class_member_tuples class indicates that the contained tuple is a member of
# that class.

# 2) The tuple that links part_subpart_tuples and class_of_tuples indicates that
# the former is a subpart of the latter.

# The tuple referred to in the second assertion:
org.omni4d.core.second_assertion_tuple:
  type: tuple
  objects:
    org.omni4d.core.class_of_tuples:
      role: part
    org.omni4d.core.part_subpart_tuples:
      role: subpart


# In order to represent individual people, we create the class persons. All
# signs representing people will belong to this class.
org.omni4d.core.persons:
  type: class

# The persons class is a subpart of class_of_individuals. We use a tuple to link
# the two.
org.omni4d.core.persons--individuals:
  type: tuple
  objects:
    org.omni4d.core.class_of_individuals:
      role: part
    org.omni4d.core.persons:
      role: subpart

# In order to show that the previous tuple is a part_subpart tuple, we make it a
# member of the part_subpart_tuples class.
org.omni4d.core.persons--individuals.classify:
  type: tuple
  objects:
    org.omni4d.core.part_subpart_tuples:
      role: class
    org.omni4d.core.persons--individuals:
      role: member

# The previous tuple is itself a member of the class_members_tuple class. This is
# an example of the first assertion.
org.omni4d.core.persons--individuals.classify.classify:
  type: tuple
  objects:
    org.omni4d.core.class_member_tuples:
      role: class
    org.omni4d.core.persons--individuals.classify:
      role: member

# A similar pattern arises for organisations.
org.omni4d.core.organisations:
  type: class

org.omni4d.core.organisations--individuals:
  type: tuple
  objects:
    org.omni4d.core.class_of_individuals:
      role: part
    org.omni4d.core.organisations:
      role: subpart

org.omni4d.core.organisations--individuals.classify:
  type: tuple
  objects:
    org.omni4d.core.part_subpart_tuples:
      role: class
    org.omni4d.core.organisations--individuals:
      role: member

org.omni4d.core.organisations--individuals.classify.classify:
  type: tuple
  objects:
    org.omni4d.core.class_member_tuples:
      role: class
    org.omni4d.core.organisations--individuals.classify:
      role: member

# And the same pattern again for character_strings
org.omni4d.core.character_strings:
  type: class

org.omni4d.core.character_strings--individuals:
  type: tuple
  objects:
    org.omni4d.core.class_of_individuals:
      role: part
    org.omni4d.core.character_strings:
      role: subpart

org.omni4d.core.character_strings--individuals.classify:
  type: tuple
  objects:
    org.omni4d.core.part_subpart_tuples:
      role: class
    org.omni4d.core.character_strings--individuals:
      role: member

org.omni4d.core.character_strings--individuals.classify.classify:
  type: tuple
  objects:
    org.omni4d.core.class_member_tuples:
      role: class
    org.omni4d.core.character_strings--individuals.classify:
      role: member
